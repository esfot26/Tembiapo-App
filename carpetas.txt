app/
 ‚î£ screens/          # Pantallas principales
 ‚îÉ ‚î£ auth/           # Login, Registro, ForgotPassword...
 ‚îÉ ‚î£ home/           # Pantallas relacionadas al inicio/dashboard
 ‚îÉ ‚î£ todolist/       # Tus m√≥dulos espec√≠ficos (ej: notas, tareas)
 ‚îÉ ‚îó profile/        # Perfil de usuario
 ‚î£ navigation/       # Toda la configuraci√≥n de navegadores (stack, tabs)
 ‚î£ components/       # Componentes reutilizables (botones, inputs, cards, etc.)
 ‚î£ hooks/            # Custom hooks (useAuth, useTheme...)
 ‚î£ services/         # Firebase, API, funciones externas
 ‚î£ context/          # Contextos globales (AuthContext, ThemeContext...)
 ‚î£ constants/        # Colores, estilos globales, rutas, config
 ‚î£ utils/            # Funciones helpers (formatDate, validators...)
 ‚î£ assets/           # Im√°genes, √≠conos, fuentes



Ejemplo de perfil de usuario:
import { User, getAuth, signOut } from 'firebase/auth';
import React from 'react';
import { Alert, Button, Image, Platform, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { FIREBASE_APP } from '../../../services/FirebaseConfig';

const auth = getAuth(FIREBASE_APP);

const Perfil = () => {
    const navigation = useNavigation();
    const [user, setUser] = React.useState<User | null>(null);

    React.useEffect(() => {
        const unsubscribe = auth.onAuthStateChanged(user => {
            setUser(user);
        });
        return unsubscribe;
    }, []);

    const handleSignOut = async () => {
        try {
            await signOut(auth);
            console.log('üëã Sesi√≥n cerrada');
            Alert.alert("Sesi√≥n cerrada exitosamente");
            // Aqu√≠ puedes decidir navegar a la pantalla de login si es necesario
            // Si tu navegaci√≥n principal ya maneja la l√≥gica de autenticaci√≥n, esto se har√° autom√°ticamente.
        } catch (error) {
            console.error('‚ùå Error al cerrar sesi√≥n:', error);
            Alert.alert("Error", "No se pudo cerrar la sesi√≥n");
        }
    };

    if (!user) {
        return (
            <View style={styles.container}>
                <Text>Cargando perfil...</Text>
            </View>
        );
    }

    return (
        <View style={styles.container}>
            <View style={styles.profileContainer}>
                {user.photoURL && (
                    <Image source={{ uri: user.photoURL }} resizeMode="contain" style={styles.avatar} />
                )}
                <Text style={styles.name}>Nombre de Usuario: {user.displayName || 'No disponible'}</Text>
                <Text style={styles.email}>Correo electr√≥nico: {user.email || 'No disponible'}</Text>
                
                <Button title="Cerrar Sesi√≥n" onPress={handleSignOut} />
            </View>
        </View>
    );
};

export default Perfil;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
        backgroundColor: '#f5f5f5'
    },
    profileContainer: {
        width: '100%',
        maxWidth: 350,
        alignItems: 'center',
        padding: 30,
        backgroundColor: '#fff',
        borderRadius: 10,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.25,
        shadowRadius: 3.84,
        elevation: 5,
    },
    avatar: {
        width: 100,
        height: 100,
        borderRadius: 50,
        marginBottom: 15
    },
    name: {
        fontSize: 18,
        fontWeight: 'bold',
        marginBottom: 5,
        color: '#333',
    },
    email: {
        fontSize: 14,
        color: '#666',
        marginBottom: 20
    },
});


//Ejemplo de navegaci√≥n
import React from 'react';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import Login from '../auth/Login';
import Registro from '../auth/Registro';
import Perfil from '../auth/Perfil';
import Inicio from '../home/Inicio';
import AgregarNota from '../todoList/AgregarNota'; // Pantalla para agregar una nota
import ListaNotas from '../todoList/ListaNotas'; // Pantalla para ver la lista de notas
import EditarPerfil from '../auth/EditarPerfil';

const Tab = createBottomTabNavigator();
const Stack = createNativeStackNavigator();

// Navegador para las pantallas principales de la aplicaci√≥n (solo para usuarios logueados)
function AppTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Inicio" component={Inicio} />
      <Tab.Screen name="ListaNotas" component={ListaNotas} options={{ headerTitle: "Mis Notas" }} />
      <Tab.Screen name="Perfil" component={Perfil} />
      <Tab.Screen name="AgregarNota" component={AgregarNota}  options={{headerTitle: "Agregar Nota"}}  />
      <Tab.Screen name="EditarPerfil" component={EditarPerfil}  options={{ headerTitle: "Perfil" }}  />

    </Tab.Navigator>
  );
}

// Navegador para las pantallas de autenticaci√≥n (solo para usuarios no logueados)
function AuthStack() {
  return (
    <Stack.Navigator screenOptions={{ headerShown: false }}>
      <Stack.Screen name="Login" component={Login} />
      <Stack.Screen name="Registro" component={Registro} />
      <Stack.Screen name="Inicio" component={Inicio} />
      <Stack.Screen name='AgregarNota' component={AgregarNota} options={{ headerTitle: "Agregar Nota" }} />
      <Stack.Screen name='Lista Notas' component={ListaNotas} />
      <Stack.Screen name='Perfil' component={Perfil} />
      <Stack.Screen name='Editar Perfil' component={EditarPerfil} />
    </Stack.Navigator>
  );
}

// Interfaz para definir el tipo de las props
interface Props {
  usuarioLogueado: boolean;
}

// Componente principal de navegaci√≥n que decide qu√© navegador mostrar
function Navegacion({ usuarioLogueado }: Props) {
  return (
    <Stack.Navigator screenOptions={{ headerShown: false }}>
      {usuarioLogueado ? (
        // Si el usuario est√° logueado, muestra las pesta√±as de la aplicaci√≥n
        <Stack.Screen name="App" component={AppTabs} />
      ) : (
        // Si no est√° logueado, muestra las pantallas de autenticaci√≥n
        <Stack.Screen name="Auth" component={AuthStack} />
      )}
    </Stack.Navigator>
  );
}

export default Navegacion;